Implementing Shadoff compression, a mild text compression routine.

Input:  "^IncreaseResistanceToColdWith^Byako'sProtection"
Output: "Increase resistance to cold with Byakko's protection"

in the text loading code:
cmp al, 5e
jne 271c9

(taking code from: 2443:580a 3c81 cmp al, 81)
Taking away code to handle 2-byte SJIS

_x space control code:
cmp al 5f   ; _
jnz 5813 ; jump to overline handling code
ac lodsb    ; load the number of spaces to repeat
88c1 mov cl, al
inc di
loop 5811 ; repeat "inc di"
lodsb       ; load the next actual character




Overline handling code:
cmp al, 7e   ; overline
jnz $+2
dec edi  (x04f)
	

cmp al, 5e       ; ^ = "skip the compression" code
jnz $+4   ; if not 5e, go to the above-Z check
lodsb     ; if 5e, load the next character
jz $+the end of this  ; skip the compression checks

First round: Just this code
cmp al, 5a       ; Check if above Z
jg x584d         ; jump to end if yes

cmp al, 40       ; Check if below A
jl x584d         ; jump to end if yes

inc edi (0x47)   ; increase cursor
add al, 20       ; lower the letter

jmp x584d      ; (Don't want kanji stuff happening)

|---spacecode -------------| |-overline-| |--------------------------shadoff-----------------------------|
3c5f 750c ac 88c1 47 e2fd ac 3c7e 7501 4f 3c5e 7505 ac 0f842a00 3c5a 0f8f2400 3c40 0f8c1e00 47 0420 e91800


New additions: Want to do normal things when it's a SJIS fullwidth Latin char (prefix 0x82)
When it begins with 82, it does this:

cmp al, 81
jb 5847
cmp al, a0
jb 5814
->
	mov ah, al
	lodsb
	call 56ed

Seems simple enough. I guess I'd have a single "cmp al, 82; je 5814" kind of call

Does 56ed get called normally?



It is correctly ignoring the lowercase letters, but doing a weird kanji or blank space thing with uppercase.

Probably need to jump at the end.

Now it works; still need to use a ^ control code for real uppercase letters.

Now it's working. Need to figure out a better way to encode space separated capitalized words...


SPACECODE ISSUES
The game seems to calculate the width of windows and cursor highlights based on the length in bytes, not the cursor position.
	As a result, windows are too small and cursor highlights don't reach across the screen, and the screen isn't refreshed properly.