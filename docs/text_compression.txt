Implementing Shadoff compression, a mild text compression routine.

Input:  "^IncreaseResistanceToColdWith^Byako'sProtection"
Output: "Increase resistance to cold with Byakko's protection"

in the text loading code:
cmp al, 5e
jne 271c9

(taking code from: 2443:580a 3c81 cmp al, 81)
Taking away code to handle 2-byte SJIS



spaceCompression:   ; 2443:580e
	cmp al 5f   ; _
	jnz overlineCtrlCode ; jump to overline handling code
	lodsb    ; load the number of spaces to repeat
	xor ah, ah
	add di, ax
	lodsb       ; load the next actual character

; Could I replace mov cl, al, inc di, loop 5811 with a simple add di, ax? ( 66 01 c7)
; Depends on if ah is emptied or not. (I could also just empty it, 30 e4)
; This would save 1-3 bytes here
; Did it, saved 1 byte. Woo

overlineCtrlCode:   ; 5819
	cmp al, 7e   ; overline
	jnz skipCompressionCtrlCode
	dec edi  (x04f)

(
checkFullwidth:     ; 581e, but no longer needed
	cmp al, 82
	jne skipCompressionCtrlCode
	mov ah, al
	lodsb
	sub ax, 0x7f1e
	xchg al, ah
	jmp resumeOriginalProgramming
)

skipCompressionCtrlCode:  ; 581e
	cmp al, 5e       ; ^ = "skip the compression" code
	jnz shadoffCompression   ; if not 5e, go to the next check
	lodsb     ; if 5e, load the next character
	jz halfwidthOriginal  ; skip the compression checks

shadoffCompression:                      ; 5825
	cmp al, 5a       ; Check if above Z
	jg halfwidthOriginal         ; jump to end if yes

	cmp al, 40       ; Check if below A
	jl halfwidthOriginal         ; jump to end if yes

	inc edi (0x47)   ; increase cursor
	add al, 20       ; lower the letter

	jmp halfwidthOriginal      ; (Don't want kanji stuff happening)

resumeOriginalProgramming:
	(...) ; Stuff at 0x584d

fullwidthOriginal:(581a) (582a) now 583e
	mov ah, al
	lodsb
	call 56f3
	...
halfwidthOriginal: 5867
	mov ah, 09
	xchg al, ah
	...

|---spacecode -------------| |-overline-| |--------------------------shadoff-----------------------------|
3c5f 750c ac 88c1 47 e2fd ac 3c7e 7501 4f 3c5e 7505 ac 0f842a00 3c5a 0f8f2400 3c40 0f8c1e00 47 0420 e91800


New additions: Want to do normal things when it's a SJIS fullwidth Latin char (prefix 0x82)
When it begins with 82, it does this:

cmp al, 81
jb 5847
cmp al, a0
jb 5814
->
	mov ah, al
	lodsb
	call 56ed

Seems simple enough. I guess I'd have a single "cmp al, 82; je 5814" kind of call

Does 56ed get called normally?

The rewritten code goes from 0x8c0a-0x8c35 in the file.
In the code, that is from 2443:5804-582f



It is correctly ignoring the lowercase letters, but doing a weird kanji or blank space thing with uppercase.

Probably need to jump at the end.

Now it works; still need to use a ^ control code for real uppercase letters.

Now it's working. Need to figure out a better way to encode space separated capitalized words...


So what is at 2443:56ed that the game wants to call when it gets kanji?
cmp ah, 9f
jbe 56f5
etc

But in the translated version, it's:
dec si
loop 56df
etc...
What's changing here?

Any way I can just spoof what happens to it? How does EAX change?
82a4? -> 2604
8260 -> 4203
8261 -> 4303

Maybe I can just subtract... hm
8260 - 7f1e = 342
8261 - 7f1e = 343

sub ax, 0x7f1e
xchg al, ah
0:  2d 1e 7f                sub    ax,0x7f1e
4:  86 e0                   xchg   al,ah

**Replace the call to 56ed with these.**

More than just that though... After returning from that call,
cmp al, 09 ; yes, all the values we want will be 03 I think
jb 5822

mov dx, ax
call 5754
(in here, ax gets set 2604 -> 100a)
82a4 -> 2604 -> 

push si
call 5691

Hm. If I reroute the post-fullwidth jump to skip the xchg ah, al and addition, it only wants to print the left half of each character... which function needs a better argument?
Need to compare the series of fullwidth function calls and halfwidth function calls.

fullwidth:
mov ah, al
lodsb
call 56ed
cmp al, 09
jb 5822     (mov dx, ax below)
cmp al, 0b
jbe 5852    (mov dx, ax **in halfwidth handling code**)
{
mov dx, ax
call 5754
push si
}
call 5691
[
xor ax, ax
call 5711
mov si, 0414
call 5727
mov ax, [03d6]
call 5711
mov si, 03d8
]
call 5727               ; Yes, it calls it twice
pop si
inc di
inc di
jmp 57d4

halfwidth:
mov ah, 09
cmp al, a0
jb 5850
add ax, 80
xchg al, ah
{
mov dx, ax
call 5754              ; Turns off the "print only s" switch
push si
}
mov si, 03d8
mov cx, 0014
inc si
and [si], 80
inc si
mov [si], 00
inc si
loop 585e ; (first inc si)
call 5691             ; Allocate screen space for letters?
[
xor ax, ax            ; This can get removed
call 5711             ; Something important. Without it the text and outline are blended together as a solid clr
mov si, 0414
call 573d             ; Outline
mov ax, [03d6]
call 5711             ; Text color? Without it it's black
mov si, 03d8
]
call 573d
pop si
inc di
jmp 57d4

There appears to be no issue if I remove the whole loop (mov si, 03d8 onward) in the halfwidth part...

I have 34 spare bytes, can I fit the fullwidth code in there?
I need 37 bytes to just jam it in. (from mov dx, ax to the final jmp 57d4) Anything else I can get rid of?

From 2443:5842 - 2443:5866:

8b d0 e8 2d ff 56 e8 66 fe 33 c0 e8 e1 fe be 14 04 e8 f1 fe a1 d6 03 e8 d5 fe be d8 03 e8 e5 fe 5e 47 47 eb 8d

Got 2 bytes from not xoring the eax, and 1 more from using a short jump right at the end of the code I wrote.
Just enough room to stick in the original fullwidth code.

resumeOriginalProgramming should now point to 5867

Can't jump to the original place with that number of bytes, so let's just jmp to the other jmp in halfwidth area.

Everything starting at 5820:

Fullwidth code:
ac 2d 1e 7f 86 e0 eb 1a 3c 5e 75 05 ac 0f 84 36 00 3c 5a 0f 8f 30 00 3c 40 0f 8c 2a 00 47 04 20 eb 25 8b d0 e8 0d ff 56 e8 46 fe 33 c0 e8 c1 fe be 14 04 e8 d1 fe a1 d6 0e e8 b5 fe be d8 03 e8 c5 fe 5e 47 47 eb 24

Halfwidth code:
b4 09 86 e0 8b d0 e8 ea fe 56 e8 23 fe e8 a0 fe be 14 04 e8 c6 fe a1 d6 03 e8 94 fe be d8 03 e8 ba fe 5e 47 e9 4c ff


I appear to have 46 bytes to spare with fullwidth/halfwidth normal support, is that enough room for compression code?
Looks like it takes roughly 43 bytes. Neat.

Stuff that jumps to 5856 should now jump to 5869.
584d should now jump to 5867.

Can't reach 57da from 5865, so jump to 588b (which jumps to 57da)

fullwidthOriginal:(581a) (582a) now 583e
	mov ah, al
	lodsb
	call 56f3
	...
halfwidthOriginal: 5867
	mov ah, 09
	xchg al, ah
	...

SPACECODE ISSUES
The game seems to calculate the width of windows and cursor highlights based on the length in bytes, not the cursor position.
	As a result, windows are too small and cursor highlights don't reach across the screen, and the screen isn't refreshed properly.